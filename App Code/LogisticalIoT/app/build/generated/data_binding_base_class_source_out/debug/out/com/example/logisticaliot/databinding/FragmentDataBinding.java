// Generated by view binder compiler. Do not edit!
package com.example.logisticaliot.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.logisticaliot.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDataBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView AngsangView;

  @NonNull
  public final TextView DoamView;

  @NonNull
  public final TextView NhietdoView;

  @NonNull
  public final TextView TTTV5;

  @NonNull
  public final TextView TTTV6;

  @NonNull
  public final TextView ThongtinView;

  private FragmentDataBinding(@NonNull RelativeLayout rootView, @NonNull TextView AngsangView,
      @NonNull TextView DoamView, @NonNull TextView NhietdoView, @NonNull TextView TTTV5,
      @NonNull TextView TTTV6, @NonNull TextView ThongtinView) {
    this.rootView = rootView;
    this.AngsangView = AngsangView;
    this.DoamView = DoamView;
    this.NhietdoView = NhietdoView;
    this.TTTV5 = TTTV5;
    this.TTTV6 = TTTV6;
    this.ThongtinView = ThongtinView;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDataBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDataBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_data, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDataBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.AngsangView;
      TextView AngsangView = ViewBindings.findChildViewById(rootView, id);
      if (AngsangView == null) {
        break missingId;
      }

      id = R.id.DoamView;
      TextView DoamView = ViewBindings.findChildViewById(rootView, id);
      if (DoamView == null) {
        break missingId;
      }

      id = R.id.NhietdoView;
      TextView NhietdoView = ViewBindings.findChildViewById(rootView, id);
      if (NhietdoView == null) {
        break missingId;
      }

      id = R.id.TT_TV5;
      TextView TTTV5 = ViewBindings.findChildViewById(rootView, id);
      if (TTTV5 == null) {
        break missingId;
      }

      id = R.id.TT_TV6;
      TextView TTTV6 = ViewBindings.findChildViewById(rootView, id);
      if (TTTV6 == null) {
        break missingId;
      }

      id = R.id.ThongtinView;
      TextView ThongtinView = ViewBindings.findChildViewById(rootView, id);
      if (ThongtinView == null) {
        break missingId;
      }

      return new FragmentDataBinding((RelativeLayout) rootView, AngsangView, DoamView, NhietdoView,
          TTTV5, TTTV6, ThongtinView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
